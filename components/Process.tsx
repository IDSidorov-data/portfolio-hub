'use client';

import Container from '@/components/Container';
import Card from '@/components/Card';
import Badge from '@/components/primitives/Badge';
import { useCardAnalytics } from '@/components/hooks/useCardAnalytics';
import type { BadgeTone } from '@/lib/badge';

const steps = [
  {
    title: '–î–∏—Å–∫–∞–≤–µ—Ä–∏ –∏ –≥–∏–ø–æ—Ç–µ–∑—ã',
    text: '–°–æ–≤–º–µ—Å—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞. –ü–æ–¥–≥–æ—Ç–æ–≤–ª—é –±—ç–∫–ª–æ–≥ –∑–∞–¥–∞—á –∏ –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É.',
  },
  {
    title: '–ó–∞–ø—É—Å–∫ MVP',
    text: '–°–æ–±–∏—Ä–∞—é —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –∑–∞ 1‚Äì3 –Ω–µ–¥–µ–ª–∏: backend, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, UI. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –¥–æ—Å—Ç—É–ø—ã, –≥–æ—Ç–æ–≤–∏–º –∫ —Ä–µ–ª–∏–∑—É.',
  },
  {
    title: '–†–æ—Å—Ç –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
    text: '–ü–æ–¥–∫–ª—é—á–∞–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –æ—Ç—á—ë—Ç—ã. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —É–ª—É—á—à–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.',
  },
  {
    title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ',
    text: '–ü–µ—Ä–µ–¥–∞—é –ø—Ä–æ–µ–∫—Ç, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –æ—Å—Ç–∞—é—Å—å –Ω–∞ —Å–≤—è–∑–∏. –ú–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∫–æ–º–∞–Ω–¥—ã.',
  },
];

type StepVibe = {
  emoji: string;
  label: string;
  tone: BadgeTone;
  surface: string;
  shadow: string;
  halo: string;
};

const stepVibes: StepVibe[] = [
  {
    emoji: 'üîç',
    label: 'Discovery',
    tone: 'sky',
    surface:
      'bg-gradient-to-br from-sky-50 via-blue-50/80 to-indigo-50 dark:from-sky-500/15 dark:via-blue-500/15 dark:to-indigo-500/15',
    shadow: 'shadow-[0_18px_40px_-22px_rgba(59,130,246,0.28)]',
    halo: 'bg-sky-200/35 dark:bg-sky-500/20',
  },
  {
    emoji: 'üõ†Ô∏è',
    label: 'MVP',
    tone: 'amber',
    surface:
      'bg-gradient-to-br from-amber-50 via-orange-50/80 to-lime-50 dark:from-amber-500/15 dark:via-orange-500/15 dark:to-lime-500/15',
    shadow: 'shadow-[0_18px_40px_-22px_rgba(251,191,36,0.28)]',
    halo: 'bg-amber-200/35 dark:bg-amber-500/20',
  },
  {
    emoji: 'üìä',
    label: 'Scale',
    tone: 'emerald',
    surface:
      'bg-gradient-to-br from-emerald-50 via-teal-50/80 to-sky-50 dark:from-emerald-500/15 dark:via-teal-500/15 dark:to-sky-500/15',
    shadow: 'shadow-[0_18px_40px_-22px_rgba(16,185,129,0.28)]',
    halo: 'bg-emerald-200/35 dark:bg-emerald-500/20',
  },
  {
    emoji: 'üöÄ',
    label: 'Launch',
    tone: 'purple',
    surface:
      'bg-gradient-to-br from-purple-50 via-violet-50/80 to-rose-50 dark:from-purple-500/15 dark:via-violet-500/15 dark:to-rose-500/15',
    shadow: 'shadow-[0_18px_40px_-22px_rgba(147,51,234,0.28)]',
    halo: 'bg-purple-200/35 dark:bg-purple-500/20',
  },
];

export default function Process() {
  return (
    <section id="process" className="py-16 sm:py-24">
      <Container>
        <header className="mb-8 space-y-3">
          <p className="text-sm font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400">
            –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º
          </p>
          <h2 className="text-3xl font-semibold leading-tight md:text-4xl">–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–æ –∑–∞–ø—É—Å–∫–∞</h2>
          <p className="max-w-2xl text-base text-slate-600 dark:text-slate-300">
            –®–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥–∏–º –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π: –æ—Ç –±—Ä–∏—Ñ–∞ –∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –≥–∏–ø–æ—Ç–µ–∑ –¥–æ –º–µ—Ç—Ä–∏–∫ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é.
          </p>
        </header>

        <ul className="grid grid-cols-1 gap-3 sm:gap-4 md:grid-cols-2 md:gap-6" role="list">
          {steps.map((step, index) => (
            <StepCard key={step.title} step={step} index={index} />
          ))}
        </ul>
      </Container>
    </section>
  );
}

type StepCardProps = {
  step: { title: string; text: string };
  index: number;
};

function StepCard({ step, index }: StepCardProps) {
  const vibe = stepVibes[index % stepVibes.length];
  const { ref } = useCardAnalytics<HTMLLIElement>({
    id: `step-${index + 1}`,
    section: 'process',
    index,
    payload: { title: step.title },
  });

  const cardId = `process-step-${index + 1}`;

  return (
    <li ref={ref} className="group/card list-none">
      <Card
        role="article"
        aria-labelledby={`${cardId}-title`}
        className={`relative flex h-full flex-col gap-3 transition md:hover:-translate-y-1 md:hover:shadow-lg motion-reduce:md:hover:translate-y-0 ${vibe.surface} ${vibe.shadow}`}
      >
        <span
          aria-hidden
          className={`pointer-events-none absolute -right-10 -top-12 h-32 w-32 rounded-full blur-3xl opacity-0 transition-opacity duration-500 md:group-hover/card:opacity-100 ${vibe.halo}`}
        />
        <div className="flex items-center justify-between gap-3">
          <Badge tone={vibe.tone} size="sm" leftIcon={vibe.emoji}>
            {vibe.label}
          </Badge>
          <Badge tone="slate" size="sm">
            –®–∞–≥ {index + 1}
          </Badge>
        </div>
        <h3
          id={`${cardId}-title`}
          className="mt-2 text-lg font-semibold leading-tight text-slate-900 line-clamp-2 md:mt-3 dark:text-white"
        >
          {step.title}
        </h3>
        <p className="text-sm leading-6 text-slate-600 dark:text-slate-300">
          {step.text}
        </p>
      </Card>
    </li>
  );
}
